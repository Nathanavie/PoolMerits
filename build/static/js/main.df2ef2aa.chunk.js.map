{"version":3,"sources":["logo.svg","components/PremMeritTable.js","components/FetchAPI.js","components/PremLeagueTable.js","components/FetchPremTable.js","components/FetchLeagueOneMerits.js","components/FetchLeague1Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","rows","table","map","row","index","perc","eightball","undefined","winPercentage","Math","round","eightBalls","key","className","pos","player","team","played","wins","losses","FetchData","componentDidMount","fetchData","fetch","then","response","json","data","setState","isLoaded","result","premMeritsByWins","catch","err","console","error","state","this","class","React","Component","slice","diff","framesWon","framesLost","position","won","draw","lost","points","nathanPremTable","log","league1MeritsByWins","nathanL1Table","App","to","id","exact","path","component","FetchAPI","FetchPremTable","FetchLeague1Merits","FetchLeague1Table","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df2ef2aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Table = props => {\r\n  const rows = props.table.map((row, index) => {\r\n    let perc\r\n    if (row.winPercentage === undefined) {\r\n      perc = '0%';\r\n    } else {\r\n      perc = Math.round(row.winPercentage) + '%'\r\n    }\r\n\r\n    let eightball\r\n    if (row.eightBalls === undefined) {\r\n      eightball = '0'\r\n    } else {\r\n      eightball = row.eightBalls\r\n    }\r\n    return (\r\n      <tr key={index} className=\"grid\">\r\n        <td >{row.pos}</td>\r\n        <td>{row.player}</td>\r\n        <td>{row.team}</td>\r\n        <td>{row.played}</td>\r\n        <td>{row.wins}</td>\r\n        <td>{row.losses}</td>\r\n        <td>{perc}</td>\r\n        <td>{eightball}</td>\r\n      </tr>\r\n    )\r\n  })\r\n  return(\r\n    <tbody>\r\n      {rows}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react'\nimport Table from './PremMeritTable'\n\nclass FetchData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      isLoaded: false,\n    };\n  }\n\n    componentDidMount = () => {\n      this.fetchData();\n    }\n\n    fetchData = () => {\n        fetch('https://v2-api.sheety.co/7f01a568513886dcd760b17376d01421/testing/premMeritsByWins')\n        .then(response => response.json())\n        .then(data => {\n                  this.setState({\n                      isLoaded: true,\n                      result: data.premMeritsByWins,\n                    })\n                  })\n                    .catch(err => console.error(err)\n                  )\n                }\n\n    render() {\n      const { isLoaded } = this.state;\n      if (!isLoaded) {\n        return <h1>Loading the table...</h1>;\n      } else {\n        return (\n        <>\n          <section class=\"container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Position</th>\n                <th>Name</th>\n                <th>Team</th>\n                <th>Played</th>\n                <th>Won</th>\n                <th>Lost</th>\n                <th>Win %</th>\n                <th>8 Balls</th>\n              </tr>\n            </thead>\n                <Table table={this.state.result} />\n          </table>\n          </section>\n        </>\n        )\n    }\n  }\n}\n\nexport default FetchData;\n","import React from 'react'\r\n\r\nconst Table = props => {\r\n  const rows = props.table.slice(0, 11).map((row, index) => {\r\n    let wins = row.framesWon;\r\n    let loss = row.framesLost;\r\n    let diff = wins - loss;\r\n\r\n\r\n\r\n    return (\r\n      <tr key={index} className=\"grid\">\r\n        <td >{row.position}</td>\r\n        <td>{row.team}</td>\r\n        <td>{row.played}</td>\r\n        <td>{row.won}</td>\r\n        <td>{row.draw}</td>\r\n        <td>{row.lost}</td>\r\n        <td>{row.points}</td>\r\n        <td>{row.framesWon}</td>\r\n        <td>{row.framesLost}</td>\r\n        <td>{diff}</td>\r\n      </tr>\r\n    )\r\n  })\r\n  return(\r\n    <tbody>\r\n      {rows}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react'\nimport Table from './PremLeagueTable'\n\nclass FetchData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      isLoaded: false,\n    };\n  }\n\n    componentDidMount = () => {\n      this.fetchData();\n    }\n\n    fetchData = () => {\n        fetch('https://v2-api.sheety.co/7f01a568513886dcd760b17376d01421/testing/nathanPremTable')\n        .then(response => response.json())\n        .then(data => {\n                  this.setState({\n                      isLoaded: true,\n                      result: data.nathanPremTable,\n                    })\n                    console.log(this.state.result)\n                  })\n                    .catch(err => console.error(err)\n                  )\n                }\n\n    render() {\n      const { isLoaded } = this.state;\n      if (!isLoaded) {\n        return <h1>Loading the table...</h1>;\n      } else {\n        return (\n        <>\n          <section class=\"container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Position</th>\n                <th>Team</th>\n                <th>Played</th>\n                <th>Won</th>\n                <th>Drawn</th>\n                <th>Lost</th>\n                <th>Points</th>\n                <th>Frames Won</th>\n                <th>Frames Lost</th>\n                <th>Frames Difference</th>\n              </tr>\n            </thead>\n            <Table table={this.state.result} />\n          </table>\n          </section>\n        </>\n        )\n    }\n  }\n}\n\nexport default FetchData;\n","import React from 'react'\nimport Table from './PremMeritTable'\n\nclass FetchData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      isLoaded: false,\n    };\n  }\n\n    componentDidMount = () => {\n      this.fetchData();\n    }\n\n    fetchData = () => {\n        fetch('https://v2-api.sheety.co/7f01a568513886dcd760b17376d01421/testing/league1MeritsByWins')\n        .then(response => response.json())\n        .then(data => {\n                  this.setState({\n                      isLoaded: true,\n                      result: data.league1MeritsByWins,\n                    })\n                  })\n                    .catch(err => console.error(err)\n                  )\n                }\n\n    render() {\n      const { isLoaded } = this.state;\n      if (!isLoaded) {\n        return <h1>Loading the table...</h1>;\n      } else {\n        return (\n        <>\n          <section class=\"container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Position</th>\n                <th>Name</th>\n                <th>Team</th>\n                <th>Played</th>\n                <th>Won</th>\n                <th>Lost</th>\n                <th>Win %</th>\n                <th>8 Balls</th>\n              </tr>\n            </thead>\n                <Table table={this.state.result} />\n          </table>\n          </section>\n        </>\n        )\n    }\n  }\n}\n\nexport default FetchData;\n","import React from 'react'\nimport Table from './PremLeagueTable'\n\nclass FetchData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      isLoaded: false,\n    };\n  }\n\n    componentDidMount = () => {\n      this.fetchData();\n    }\n\n    fetchData = () => {\n        fetch('https://v2-api.sheety.co/7f01a568513886dcd760b17376d01421/testing/nathanL1Table')\n        .then(response => response.json())\n        .then(data => {\n                  this.setState({\n                      isLoaded: true,\n                      result: data.nathanL1Table,\n                    })\n                    console.log(this.state.result)\n                  })\n                    .catch(err => console.error(err)\n                  )\n                }\n\n    render() {\n      const { isLoaded } = this.state;\n      if (!isLoaded) {\n        return <h1>Loading the table...</h1>;\n      } else {\n        return (\n        <>\n          <section class=\"container\">\n          <table>\n            <thead>\n              <tr>\n                <th>Position</th>\n                <th>Team</th>\n                <th>Played</th>\n                <th>Won</th>\n                <th>Drawn</th>\n                <th>Lost</th>\n                <th>Points</th>\n                <th>Frames Won</th>\n                <th>Frames Lost</th>\n                <th>Frames Difference</th>\n              </tr>\n            </thead>\n            <Table table={this.state.result} />\n          </table>\n          </section>\n        </>\n        )\n    }\n  }\n}\n\nexport default FetchData;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport FetchAPI from './components/FetchAPI';\nimport FetchPremTable from './components/FetchPremTable';\nimport FetchLeague1Merits from './components/FetchLeagueOneMerits';\nimport FetchLeague1Table from './components/FetchLeague1Table';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Google Sheets API Call\n        </header>\n        <nav className=\"navbar\">\n        <Link to={'/'} id=\"PremMerits\" >Premier League Merits</Link>\n        <Link to={'/PremTable'} id=\"PremTable\">Premier League Table</Link>\n        <Link to={'/League1Merits'} id=\"League1Merits\" >League One Merits</Link>\n        <Link to={'/League1Table'} id=\"League1Table\" >League One Table</Link>\n        </nav>\n        <Switch>\n          <Route exact path='/' component={FetchAPI} />\n          <Route path='/PremTable' component={FetchPremTable} />\n          <Route path='/League1Merits' component={FetchLeague1Merits} />\n          <Route path='/League1Table' component={FetchLeague1Table} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}